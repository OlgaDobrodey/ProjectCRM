openapi: 3.0.0
info:
  description: Simple CRM Sistem
  version: "1.0.0"
  title: CRM Sistem

servers:
  - url: 'http://localhost:8080/crm'

tags:
  - name: roles
    description: Everything about roles
  - name: tasks
    description: Operations about tasks
  - name: users
    description: Operations about user
  - name: auth
    description: login/logout
paths:
  /roles:
    get:
      tags:
        - roles
      summary: Return a list of roles
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: NOT_FOUND
    post:
      tags:
        - roles
      summary: Add a new roles to the CRM
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '406':
          description: NOT_ACCEPTABLE
  /roles/{id}:
    get:
      tags:
        - roles
      summary: Returns a role by ID.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg

        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A role object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: no found DB role by id.
    put:
      tags:
        - roles
      summary: Update an role by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg

        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: OK
        '304':
          description: NOT_MODIFIED
        '404':
          description: NOT_FOUND
  /roles/{id}/users:
    get:
      tags:
        - roles
      summary: Returns all role users by role by id.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
              type: string
              format: token
              example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Return a list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: NOT FOUND.
  /tasks:
    get:
      tags:
        - tasks
      summary: Return a list of tasks
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: NOT_FOUND

    post:
      tags:
        - tasks
      summary: Add a new task to the CRM
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: NOT_FOUND
  /tasks/page:
    get:
      tags:
        - tasks
      summary: Return a list of tasks
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      responses:
        '200':
          description: OK

        '404':
          description: NOT_FOUND

  /tasks/{id}:
    get:
      tags:
        - tasks
      summary: Task by Id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: no found DB role by id, NOT_FOUND
    put:
      tags:
        - tasks
      summary: Update an task by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
        '304':
          description: NOT_MODIFIED
        '404':
          description: NOT_FOUND

    delete:
      tags:
        - tasks
      summary: Delete an task by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: NOT_FOUND

  /tasks/{id}/users:
    get:
      tags:
        - tasks
      summary: Return all users by task with id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: NOT_FOUND

    delete:
      tags:
        - tasks
      summary: Revoke all users from task by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: NOT_FOUND

  /tasks/{id}/{statis}:
    put:
      tags:
        - tasks
      summary: Change status for task by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: statis
          in: path
          required: true
          schema:
            type: string
            enum:
              - NEW
              - PROGRESS
              - DONE
      responses:
        '200':
          description: OK
        '404':
          description: NOT_FOUND
  /users:
    get:
      tags:
        - users
      summary: Return a list of users
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: NOT_FOUND
    post:
      tags:
        - users
      summary: Add a new user to the CRM
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: CREATE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: NOT_ACCEPTABLE

  /users/{id}:
    get:
      tags:
        - users
      summary: Returns a user by ID.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: no found DB role by id.
    put:
      tags:
        - users
      summary: Update an user by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
        '304':
          description: NOT_MODIFIED
        '404':
          description: NOT_FOUND
    delete:
      tags:
        - users
      summary: delete an user by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: NOT_FOUND
  /users/{id}/tasks:
    get:
      tags:
        - users
      summary: return all tasks by user with id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: NOT_FOUND, no found user in DB
    delete:
      tags:
        - users
      summary: revoke all user tasks from user by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '304':
          description: NOT_MODIFIED
  /users/{id}/password:
    put:
      tags:
        - users
      summary: update user's password by id
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordDTOForChanges'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: NOT_FOUND
  /users/{userId}/tasks/{taskId}:
    put:
      tags:
        - users
      summary: assing task to user
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            format: token
            example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg0MjU0NDQsImV4cCI6MTYzOTAzMDI0NH0.ZUmRQ0eXSAg_TlaD3g9pvrGK0a8E-t6n3YA0_3EZPLg
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64

        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '404':
          description: NOT_FOUND
    delete:
      tags:
        - users
      summary: revoke task from user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64

        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '304':
          description: NOT_MODIFIED
  /login:
    post:
      tags:
        - auth
      summary: assing task to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: string
                    example: Petrov
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJQZXRyb3YiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE2Mzg1NTYyMjksImV4cCI6MTYzOTE2MTAyOX0.cJUYsXDim2CvnxEz8o_CerUDptkXAvvLDWuWejkeJ_s
        '406':
          description: FORBIDDEN
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        status:
          type: string
          enum:
            - NEW
            - PROGRESS
            - DONE
        deadline:
          type: string
          format: date
        info:
          type: string
      xml:
        name: Task
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        psw:
          type: string
        role_id:
          type: integer
          format: int64
          minimum: 1
          maximum: 4
        first_name:
          type: string
        last_name:
          type: string
      xml:
        name: User
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        role_name:
          type: string
      xml:
        name: Role
    PasswordDTOForChanges :
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        repeatNewPassword:
          type: string
      xml:
        name: PasswordDTOForChanges